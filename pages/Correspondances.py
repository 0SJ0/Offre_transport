# Librairies
# Calcul
import numpy as np
import math
# Data management
import zipfile
from datetime import datetime, timedelta
import base64
import json
import pandas as pd
import io
import requests
import pytz
# Data visualisation
import plotly.express as px
import streamlit as st
from PIL import Image
# Traitement texte
from bs4 import BeautifulSoup
import re
import shutil
from fuzzywuzzy import process
import random

st.set_page_config(initial_sidebar_state="collapsed")
# Fonctions


def ajouter_bruit_df(df, colonnes, bruit_max=0.0005):
    """
    Ajoute un bruit aléatoire aux colonnes spécifiées d'un DataFrame pandas.
    
    Args:
    - df (pd.DataFrame): DataFrame contenant les données.
    - colonnes (dict): Dictionnaire avec les noms des colonnes pour les latitudes et longitudes.
    - bruit_max (float, optional): La valeur maximale du bruit à ajouter ou soustraire. Default est 0.001.

    Returns:
    pd.DataFrame: DataFrame avec du bruit ajouté aux colonnes spécifiées.
    """
    
    for col in colonnes.values():
        df[col] += np.random.uniform(-bruit_max, bruit_max, df.shape[0])
    
    return df

def extraire_six_chiffres(chaine):
    chiffres = ''.join(filter(str.isdigit, chaine))
    return chiffres[:6]


def process_gtfs_data(url, extraction_path, liste_code_UIC):
    """chargement GTFS"""
    filename = "GTFS_HdF.zip"
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, "wb") as f:
            f.write(response.content)
        gtfs_data = response.content
        b64 = base64.b64encode(gtfs_data).decode()

        liste_zip = ["stop_times.txt", "stops.txt", "trips.txt", "routes.txt", "calendar_dates.txt", "feed_info.txt", "agency.txt", "transfers.txt"]
        
        with zipfile.ZipFile(io.BytesIO(response.content), 'r') as zip_ref:
            for filename in liste_zip:
                zip_ref.extract(filename, extraction_path)

            index_dict = {filename: index for index, filename in enumerate(liste_zip)}
            sorted_files = sorted(zip_ref.infolist(), key=lambda x: index_dict[x.filename])
            
            for element_archive in sorted_files:
                if element_archive.filename == 'stop_times.txt':
                    stop_times = pd.read_csv(zip_ref.open(element_archive.filename))
                    stop_times['uic'] = stop_times['stop_id'].str[-8:]
                    stop_times = stop_times[stop_times['uic'].isin(liste_code_UIC)]
                    stop_times = stop_times.drop('uic', axis=1)
                    liste_trips_id = list(stop_times.trip_id)

                elif element_archive.filename == 'stops.txt':
                    stops = pd.read_csv(zip_ref.open(element_archive.filename))
                    stops['uic'] = stops['stop_id'].str[-8:]
                    stops = stops[stops['uic'].isin(liste_code_UIC)]
                    stops = stops.drop('uic', axis=1)

                elif element_archive.filename == 'trips.txt':
                    trips = pd.read_csv(zip_ref.open(element_archive.filename))
                    trips = trips[trips['trip_id'].isin(liste_trips_id)]
                    liste_route_id = list(trips.route_id)
                    liste_service_id = list(set(trips.service_id))

                elif element_archive.filename == 'routes.txt':
                    routes = pd.read_csv(zip_ref.open(element_archive.filename))
                    routes = routes[routes['route_id'].isin(liste_route_id)]
                    liste_agency_id = list(set(routes.agency_id))

                elif element_archive.filename == 'calendar_dates.txt':
                    calendar_dates = pd.read_csv(zip_ref.open(element_archive.filename))
                    calendar_dates = calendar_dates[calendar_dates['service_id'].isin(liste_service_id)]

                elif element_archive.filename == 'feed_info.txt':
                    feed_info = pd.read_csv(zip_ref.open(element_archive.filename))

                elif element_archive.filename == 'agency.txt':
                    agency = pd.read_csv(zip_ref.open(element_archive.filename))
                    agency = agency[agency['agency_id'].isin(liste_agency_id)]

                elif element_archive.filename == 'transfers.txt':
                    transfers = pd.read_csv(zip_ref.open(element_archive.filename))

        # Vous pouvez ici retourner les DataFrames traités ou les enregistrer selon votre besoin
        return {
            "stop_times": stop_times,
            "stops": stops,
            "trips": trips,
            "routes": routes,
            "calendar_dates": calendar_dates,
            "feed_info": feed_info,
            "agency": agency,
            "transfers": transfers
        }
    else:
        raise Exception("Failed to download file")

def convert_df(df):
    # IMPORTANT: Cache the conversion to prevent computation on every rerun
    return df.to_csv(sep=';',index=False,encoding='utf-8-sig').encode('utf-8-sig')
    

def date_now():
    """Donne la date d'aujourd'hui"""
    #le fuseau horaire de Paris
    paris_timezone = pytz.timezone('Europe/Paris')
    #l'heure actuelle à Paris
    now = datetime.now(paris_timezone)
    datenow=str(now.year).zfill(4)+str(now.month).zfill(2)+str(now.day).zfill(2)+"T"+str(now.hour).zfill(2)+str(now.minute).zfill(2)+str(now.second).zfill(2)
    return(datenow)

def depart_gare(uic_gare, temps=0,date=date_now()):
    """Fonction qui prend en entrée l'UIC et qui donne la liste des prochains départs à cette gare en utilisant l'api de la SNCF"""
    id2="dcf53a2e-d4f1-4eb1-8490-e665ea41260b"
    password=""
    requete="https://api.sncf.com/v1/coverage/sncf/stop_areas/stop_area:SNCF:"+uic_gare+"/departures?from_datetime="+date
    r = requests.get(requete, auth=(id2, password))
    json_object = json.loads(str(r.text))
    nombre_element=json_object["pagination"]["items_on_page"]
    # Création départ
    depart_destination=[]
    depart_code=[]
    depart_heure=[]
    depart_destination_lon=[]
    depart_destination_lat=[]

    for i in range(nombre_element):
        depart_destination.append(json_object["departures"][i]["display_informations"]["direction"])
        depart_code.append(json_object["departures"][i]["display_informations"]["code"])
        depart_heure.append(json_object["departures"][i]['stop_date_time']['departure_date_time'][-6:][:2]+"h"+json_object["departures"][i]['stop_date_time']['departure_date_time'][-6:][2:4])
        depart_destination_lat.append(float(json_object["departures"][i]['route']["direction"]["stop_area"]['coord']["lat"]))
        depart_destination_lon.append(float(json_object["departures"][i]['route']["direction"]["stop_area"]['coord']["lon"]))

    
    data = list(zip(depart_destination, depart_code, depart_heure, depart_destination_lat, depart_destination_lon))

    df = pd.DataFrame(data, columns=["depart_destination", "depart_code", "depart_heure", "depart_destination_lat", "depart_destination_lon"])

    return(df)

def date_du_jour2():
    #paris_timezone = pytz.timezone('Europe/Paris')
    return datetime.now().strftime('%Y-%m-%d')

def haversine_distance(lat1, lon1, lat2, lon2):
    R = 6371  # Rayon de la Terre en km

    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = (math.sin(dlat / 2) * math.sin(dlat / 2) +
         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) *
         math.sin(dlon / 2) * math.sin(dlon / 2))
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

def bus_stops_nearby(bus_stops_df, station_df, radius=1):
    """Trouve les arrêts de  bus les plus proche d'une gare en fonction d'un rayon radius"""
    station_lat, station_lon = station_df.iloc[0]["latitude"], station_df.iloc[0]["longitude"]
    bus_stops_df["distance"] = bus_stops_df.apply(lambda row: haversine_distance(station_lat, station_lon, row["latitude"], row["longitude"]), axis=1)
    nearby_stops = bus_stops_df[bus_stops_df["distance"] <= radius]
    return nearby_stops.drop("distance", axis=1)

def date_du_jour():
    #paris_timezone = pytz.timezone('Europe/Paris')
    return datetime.now().strftime('%Y%m%d')



#################################################################### Début application ################################################################

# Chargement de la liste des gares à étudier
df=pd.read_csv("data/liste_gares.csv", sep=';')
df_ref=df
liste_code_UIC=[87297291, 87296178, 87296012, 87297119, 87296004, 87296269, 87171371, 87297085, 87296129, 87171702, 87171744, 87171736, 87271817, 87116699, 87271783, 87171348, 87171355, 87296293, 87296095, 87297150, 87297143, 87296616, 87297051, 87116566, 87296566, 87297283, 87116582, 87296418, 87116673, 87116681, 87295063, 87324335, 87296871, 87296145, 87116574, 87272286, 87271775, 87271601, 87271734, 87296434, 87296442, 87296632, 87296608, 87171751, 87171769, 87296152, 87271874, 87271882, 87109306, 87286005, 87287250, 87287128, 87286732, 87286187, 87345389, 87286518, 87286229, 87286112, 87343418, 87343210, 87343400, 87345207, 87297515, 87286500, 87343301, 87286427, 87286419, 87296244, 87281006, 87345397, 87295808, 87345421, 87345439, 87287219, 87286740, 87345496, 87345249, 87345413, 87286716, 87281055, 87343475, 87281469, 87281451, 87295709, 87286161, 87345306, 87295055, 87342295, 87342287, 87286302, 87343160, 87286542, 87281402, 87286401, 87345587, 87343459, 87345280, 87286567, 87343103, 87286807, 87286625, 87295022, 87287169, 87286062, 87287102, 87345447, 87286179, 87286203, 87286435, 87286641, 87342469, 87286146, 87281121, 87297531, 87343004, 87286575, 87286609, 87286815, 87286583, 87286096, 87295568, 87286195, 87295220, 87295667, 87281105, 87345520, 87345595, 87295725, 87295733, 87295774, 87345405, 87295014, 87281113, 87342436, 87345314, 87342451, 87345009, 87297523, 87295857, 87345561, 87295642, 87286260, 87343319, 87295006, 87295543, 87295048, 87295600, 87295790, 87281279, 87286856, 87286864, 87286831, 87287193, 87286526, 87287276, 87295535, 87281311, 87223263, 87286872, 87286534, 87286849, 87281246, 87287235, 87287243, 87286781, 87286278, 87287151, 87287185, 87286245, 87281139, 87345553, 87345546, 87313510, 87276006, 87272096, 87313668, 87313692, 87313700, 87313247, 87313262, 87276303, 87313296, 87313270, 87313288, 87316406, 87313593, 87276774, 87276212, 87272195, 87276741, 87276618, 87276766, 87313387, 87313403, 87276691, 87313734, 87313759, 87313833, 87313841, 87276725, 87381228, 87381202, 87381210, 87313569, 87316398, 87313577, 87276204, 87271551, 87276402, 87313585, 87296459, 87276782, 87313353, 87316208, 87313684, 87271577, 87276410, 87276113, 87313601, 87276717, 87276287, 87276279, 87313676, 87381269, 87381236, 87313304, 87313551, 87313544, 87276329, 87276311, 87271593, 87271585, 87276444, 87313726, 87313718, 87276352, 87276378, 87272013, 87276733, 87116665, 87313742, 87342014, 87317610, 87317263, 87317305, 87345157, 87345116, 87345108, 87342097, 87342089, 87345165, 87342048, 87342063, 87317123, 87342303, 87342337, 87317321, 87317255, 87316604, 87317222, 87342410, 87317099, 87342535, 87342105, 87342188, 87317180, 87317164, 87342071, 87317057, 87281071, 87317081, 87342261, 87342238, 87317107, 87317586, 87317016, 87342584, 87345231, 87342204, 87316687, 87317339, 87345025, 87342279, 87316679, 87317115, 87281428, 87287292, 87287300, 87342139, 87342006, 87345272, 87345140, 87345124, 87345215, 87342543, 87342113, 87281444, 87342550, 87342592, 87342527, 87342576, 87281410, 87317065, 87342402, 87342121, 87345132, 87342246, 87342212, 87342253, 87345033, 87317230, 87317248, 87345223, 87345041, 87345256, 87345264, 87281436, 87342220, 87317198, 87317206, 87313080, 87313874, 87317362, 87313320, 87316125, 87316059, 87317404, 87317487, 87317396, 87313460, 87316752, 87313486, 87313882, 87317495, 87317503, 87313221, 87313239, 87313395, 87313072, 87316067, 87342030, 87313114, 87313106, 87313478, 87313049, 87313064, 87313437, 87313494, 87313213, 87316109, 87313098, 87313338, 87313346, 87313122, 87317511, 87316745, 87313130, 87313379, 87313445, 87316075, 87313056, 87315044, '0087297291', '0087296178', '0087296012', '0087297119', '0087296004', '0087296269', '0087171371', '0087297085', '0087296129', '0087171702', '0087171744', '0087171736', '0087271817', '0087116699', '0087271783', '0087171348', '0087171355', '0087296293', '0087296095', '0087297150', '0087297143', '0087296616', '0087297051', '0087116566', '0087296566', '0087297283', '0087116582', '0087296418', '0087116673', '0087116681', '0087295063', '0087324335', '0087296871', '0087296145', '0087116574', '0087272286', '0087271775', '0087271601', '0087271734', '0087296434', '0087296442', '0087296632', '0087296608', '0087171751', '0087171769', '0087296152', '0087271874', '0087271882', '0087109306', '0087286005', '0087287250', '0087287128', '0087286732', '0087286187', '0087345389', '0087286518', '0087286229', '0087286112', '0087343418', '0087343210', '0087343400', '0087345207', '0087297515', '0087286500', '0087343301', '0087286427', '0087286419', '0087296244', '0087281006', '0087345397', '0087295808', '0087345421', '0087345439', '0087287219', '0087286740', '0087345496', '0087345249', '0087345413', '0087286716', '0087281055', '0087343475', '0087281469', '0087281451', '0087295709', '0087286161', '0087345306', '0087295055', '0087342295', '0087342287', '0087286302', '0087343160', '0087286542', '0087281402', '0087286401', '0087345587', '0087343459', '0087345280', '0087286567', '0087343103', '0087286807', '0087286625', '0087295022', '0087287169', '0087286062', '0087287102', '0087345447', '0087286179', '0087286203', '0087286435', '0087286641', '0087342469', '0087286146', '0087281121', '0087297531', '0087343004', '0087286575', '0087286609', '0087286815', '0087286583', '0087286096', '0087295568', '0087286195', '0087295220', '0087295667', '0087281105', '0087345520', '0087345595', '0087295725', '0087295733', '0087295774', '0087345405', '0087295014', '0087281113', '0087342436', '0087345314', '0087342451', '0087345009', '0087297523', '0087295857', '0087345561', '0087295642', '0087286260', '0087343319', '0087295006', '0087295543', '0087295048', '0087295600', '0087295790', '0087281279', '0087286856', '0087286864', '0087286831', '0087287193', '0087286526', '0087287276', '0087295535', '0087281311', '0087223263', '0087286872', '0087286534', '0087286849', '0087281246', '0087287235', '0087287243', '0087286781', '0087286278', '0087287151', '0087287185', '0087286245', '0087281139', '0087345553', '0087345546', '0087313510', '0087276006', '0087272096', '0087313668', '0087313692', '0087313700', '0087313247', '0087313262', '0087276303', '0087313296', '0087313270', '0087313288', '0087316406', '0087313593', '0087276774', '0087276212', '0087272195', '0087276741', '0087276618', '0087276766', '0087313387', '0087313403', '0087276691', '0087313734', '0087313759', '0087313833', '0087313841', '0087276725', '0087381228', '0087381202', '0087381210', '0087313569', '0087316398', '0087313577', '0087276204', '0087271551', '0087276402', '0087313585', '0087296459', '0087276782', '0087313353', '0087316208', '0087313684', '0087271577', '0087276410', '0087276113', '0087313601', '0087276717', '0087276287', '0087276279', '0087313676', '0087381269', '0087381236', '0087313304', '0087313551', '0087313544', '0087276329', '0087276311', '0087271593', '0087271585', '0087276444', '0087313726', '0087313718', '0087276352', '0087276378', '0087272013', '0087276733', '0087116665', '0087313742', '0087342014', '0087317610', '0087317263', '0087317305', '0087345157', '0087345116', '0087345108', '0087342097', '0087342089', '0087345165', '0087342048', '0087342063', '0087317123', '0087342303', '0087342337', '0087317321', '0087317255', '0087316604', '0087317222', '0087342410', '0087317099', '0087342535', '0087342105', '0087342188', '0087317180', '0087317164', '0087342071', '0087317057', '0087281071', '0087317081', '0087342261', '0087342238', '0087317107', '0087317586', '0087317016', '0087342584', '0087345231', '0087342204', '0087316687', '0087317339', '0087345025', '0087342279', '0087316679', '0087317115', '0087281428', '0087287292', '0087287300', '0087342139', '0087342006', '0087345272', '0087345140', '0087345124', '0087345215', '0087342543', '0087342113', '0087281444', '0087342550', '0087342592', '0087342527', '0087342576', '0087281410', '0087317065', '0087342402', '0087342121', '0087345132', '0087342246', '0087342212', '0087342253', '0087345033', '0087317230', '0087317248', '0087345223', '0087345041', '0087345256', '0087345264', '0087281436', '0087342220', '0087317198', '0087317206', '0087313080', '0087313874', '0087317362', '0087313320', '0087316125', '0087316059', '0087317404', '0087317487', '0087317396', '0087313460', '0087316752', '0087313486', '0087313882', '0087317495', '0087317503', '0087313221', '0087313239', '0087313395', '0087313072', '0087316067', '0087342030', '0087313114', '0087313106', '0087313478', '0087313049', '0087313064', '0087313437', '0087313494', '0087313213', '0087316109', '0087313098', '0087313338', '0087313346', '0087313122', '0087317511', '0087316745', '0087313130', '0087313379', '0087313445', '0087316075', '0087313056', '0087315044', '0087297291', '0087296178', '0087296012', '0087297119', '0087296004', '0087296269', '0087171371', '0087297085', '0087296129', '0087171702', '0087171744', '0087171736', '0087271817', '0087116699', '0087271783', '0087171348', '0087171355', '0087296293', '0087296095', '0087297150', '0087297143', '0087296616', '0087297051', '0087116566', '0087296566', '0087297283', '0087116582', '0087296418', '0087116673', '0087116681', '0087295063', '0087324335', '0087296871', '0087296145', '0087116574', '0087272286', '0087271775', '0087271601', '0087271734', '0087296434', '0087296442', '0087296632', '0087296608', '0087171751', '0087171769', '0087296152', '0087271874', '0087271882', '0087109306', '0087286005', '0087287250', '0087287128', '0087286732', '0087286187', '0087345389', '0087286518', '0087286229', '0087286112', '0087343418', '0087343210', '0087343400', '0087345207', '0087297515', '0087286500', '0087343301', '0087286427', '0087286419', '0087296244', '0087281006', '0087345397', '0087295808', '0087345421', '0087345439', '0087287219', '0087286740', '0087345496', '0087345249', '0087345413', '0087286716', '0087281055', '0087343475', '0087281469', '0087281451', '0087295709', '0087286161', '0087345306', '0087295055', '0087342295', '0087342287', '0087286302', '0087343160', '0087286542', '0087281402', '0087286401', '0087345587', '0087343459', '0087345280', '0087286567', '0087343103', '0087286807', '0087286625', '0087295022', '0087287169', '0087286062', '0087287102', '0087345447', '0087286179', '0087286203', '0087286435', '0087286641', '0087342469', '0087286146', '0087281121', '0087297531', '0087343004', '0087286575', '0087286609', '0087286815', '0087286583', '0087286096', '0087295568', '0087286195', '0087295220', '0087295667', '0087281105', '0087345520', '0087345595', '0087295725', '0087295733', '0087295774', '0087345405', '0087295014', '0087281113', '0087342436', '0087345314', '0087342451', '0087345009', '0087297523', '0087295857', '0087345561', '0087295642', '0087286260', '0087343319', '0087295006', '0087295543', '0087295048', '0087295600', '0087295790', '0087281279', '0087286856', '0087286864', '0087286831', '0087287193', '0087286526', '0087287276', '0087295535', '0087281311', '0087223263', '0087286872', '0087286534', '0087286849', '0087281246', '0087287235', '0087287243', '0087286781', '0087286278', '0087287151', '0087287185', '0087286245', '0087281139', '0087345553', '0087345546', '0087313510', '0087276006', '0087272096', '0087313668', '0087313692', '0087313700', '0087313247', '0087313262', '0087276303', '0087313296', '0087313270', '0087313288', '0087316406', '0087313593', '0087276774', '0087276212', '0087272195', '0087276741', '0087276618', '0087276766', '0087313387', '0087313403', '0087276691', '0087313734', '0087313759', '0087313833', '0087313841', '0087276725', '0087381228', '0087381202', '0087381210', '0087313569', '0087316398', '0087313577', '0087276204', '0087271551', '0087276402', '0087313585', '0087296459', '0087276782', '0087313353', '0087316208', '0087313684', '0087271577', '0087276410', '0087276113', '0087313601', '0087276717', '0087276287', '0087276279', '0087313676', '0087381269', '0087381236', '0087313304', '0087313551', '0087313544', '0087276329', '0087276311', '0087271593', '0087271585', '0087276444', '0087313726', '0087313718', '0087276352', '0087276378', '0087272013', '0087276733', '0087116665', '0087313742', '0087342014', '0087317610', '0087317263', '0087317305', '0087345157', '0087345116', '0087345108', '0087342097', '0087342089', '0087345165', '0087342048', '0087342063', '0087317123', '0087342303', '0087342337', '0087317321', '0087317255', '0087316604', '0087317222', '0087342410', '0087317099', '0087342535', '0087342105', '0087342188', '0087317180', '0087317164', '0087342071', '0087317057', '0087281071', '0087317081', '0087342261', '0087342238', '0087317107', '0087317586', '0087317016', '0087342584', '0087345231', '0087342204', '0087316687', '0087317339', '0087345025', '0087342279', '0087316679', '0087317115', '0087281428', '0087287292', '0087287300', '0087342139', '0087342006', '0087345272', '0087345140', '0087345124', '0087345215', '0087342543', '0087342113', '0087281444', '0087342550', '0087342592', '0087342527', '0087342576', '0087281410', '0087317065', '0087342402', '0087342121', '0087345132', '0087342246', '0087342212', '0087342253', '0087345033', '0087317230', '0087317248', '0087345223', '0087345041', '0087345256', '0087345264', '0087281436', '0087342220', '0087317198', '0087317206', '0087313080', '0087313874', '0087317362', '0087313320', '0087316125', '0087316059', '0087317404', '0087317487', '0087317396', '0087313460', '0087316752', '0087313486', '0087313882', '0087317495', '0087317503', '0087313221', '0087313239', '0087313395', '0087313072', '0087316067', '0087342030', '0087313114', '0087313106', '0087313478', '0087313049', '0087313064', '0087313437', '0087313494', '0087313213', '0087316109', '0087313098', '0087313338', '0087313346', '0087313122', '0087317511', '0087316745', '0087313130', '0087313379', '0087313445', '0087316075', '0087313056', '0087315044', '87297291', '87296178', '87296012', '87297119', '87296004', '87296269', '87171371', '87297085', '87296129', '87171702', '87171744', '87171736', '87271817', '87116699', '87271783', '87171348', '87171355', '87296293', '87296095', '87297150', '87297143', '87296616', '87297051', '87116566', '87296566', '87297283', '87116582', '87296418', '87116673', '87116681', '87295063', '87324335', '87296871', '87296145', '87116574', '87272286', '87271775', '87271601', '87271734', '87296434', '87296442', '87296632', '87296608', '87171751', '87171769', '87296152', '87271874', '87271882', '87109306', '87286005', '87287250', '87287128', '87286732', '87286187', '87345389', '87286518', '87286229', '87286112', '87343418', '87343210', '87343400', '87345207', '87297515', '87286500', '87343301', '87286427', '87286419', '87296244', '87281006', '87345397', '87295808', '87345421', '87345439', '87287219', '87286740', '87345496', '87345249', '87345413', '87286716', '87281055', '87343475', '87281469', '87281451', '87295709', '87286161', '87345306', '87295055', '87342295', '87342287', '87286302', '87343160', '87286542', '87281402', '87286401', '87345587', '87343459', '87345280', '87286567', '87343103', '87286807', '87286625', '87295022', '87287169', '87286062', '87287102', '87345447', '87286179', '87286203', '87286435', '87286641', '87342469', '87286146', '87281121', '87297531', '87343004', '87286575', '87286609', '87286815', '87286583', '87286096', '87295568', '87286195', '87295220', '87295667', '87281105', '87345520', '87345595', '87295725', '87295733', '87295774', '87345405', '87295014', '87281113', '87342436', '87345314', '87342451', '87345009', '87297523', '87295857', '87345561', '87295642', '87286260', '87343319', '87295006', '87295543', '87295048', '87295600', '87295790', '87281279', '87286856', '87286864', '87286831', '87287193', '87286526', '87287276', '87295535', '87281311', '87223263', '87286872', '87286534', '87286849', '87281246', '87287235', '87287243', '87286781', '87286278', '87287151', '87287185', '87286245', '87281139', '87345553', '87345546', '87313510', '87276006', '87272096', '87313668', '87313692', '87313700', '87313247', '87313262', '87276303', '87313296', '87313270', '87313288', '87316406', '87313593', '87276774', '87276212', '87272195', '87276741', '87276618', '87276766', '87313387', '87313403', '87276691', '87313734', '87313759', '87313833', '87313841', '87276725', '87381228', '87381202', '87381210', '87313569', '87316398', '87313577', '87276204', '87271551', '87276402', '87313585', '87296459', '87276782', '87313353', '87316208', '87313684', '87271577', '87276410', '87276113', '87313601', '87276717', '87276287', '87276279', '87313676', '87381269', '87381236', '87313304', '87313551', '87313544', '87276329', '87276311', '87271593', '87271585', '87276444', '87313726', '87313718', '87276352', '87276378', '87272013', '87276733', '87116665', '87313742', '87342014', '87317610', '87317263', '87317305', '87345157', '87345116', '87345108', '87342097', '87342089', '87345165', '87342048', '87342063', '87317123', '87342303', '87342337', '87317321', '87317255', '87316604', '87317222', '87342410', '87317099', '87342535', '87342105', '87342188', '87317180', '87317164', '87342071', '87317057', '87281071', '87317081', '87342261', '87342238', '87317107', '87317586', '87317016', '87342584', '87345231', '87342204', '87316687', '87317339', '87345025', '87342279', '87316679', '87317115', '87281428', '87287292', '87287300', '87342139', '87342006', '87345272', '87345140', '87345124', '87345215', '87342543', '87342113', '87281444', '87342550', '87342592', '87342527', '87342576', '87281410', '87317065', '87342402', '87342121', '87345132', '87342246', '87342212', '87342253', '87345033', '87317230', '87317248', '87345223', '87345041', '87345256', '87345264', '87281436', '87342220', '87317198', '87317206', '87313080', '87313874', '87317362', '87313320', '87316125', '87316059', '87317404', '87317487', '87317396', '87313460', '87316752', '87313486', '87313882', '87317495', '87317503', '87313221', '87313239', '87313395', '87313072', '87316067', '87342030', '87313114', '87313106', '87313478', '87313049', '87313064', '87313437', '87313494', '87313213', '87316109', '87313098', '87313338', '87313346', '87313122', '87317511', '87316745', '87313130', '87313379', '87313445', '87316075', '87313056', '87315044', '87297291', '87296178', '87296012', '87297119', '87296004', '87296269', '87171371', '87297085', '87296129', '87171702', '87171744', '87171736', '87271817', '87116699', '87271783', '87171348', '87171355', '87296293', '87296095', '87297150', '87297143', '87296616', '87297051', '87116566', '87296566', '87297283', '87116582', '87296418', '87116673', '87116681', '87295063', '87324335', '87296871', '87296145', '87116574', '87272286', '87271775', '87271601', '87271734', '87296434', '87296442', '87296632', '87296608', '87171751', '87171769', '87296152', '87271874', '87271882', '87109306', '87286005', '87287250', '87287128', '87286732', '87286187', '87345389', '87286518', '87286229', '87286112', '87343418', '87343210', '87343400', '87345207', '87297515', '87286500', '87343301', '87286427', '87286419', '87296244', '87281006', '87345397', '87295808', '87345421', '87345439', '87287219', '87286740', '87345496', '87345249', '87345413', '87286716', '87281055', '87343475', '87281469', '87281451', '87295709', '87286161', '87345306', '87295055', '87342295', '87342287', '87286302', '87343160', '87286542', '87281402', '87286401', '87345587', '87343459', '87345280', '87286567', '87343103', '87286807', '87286625', '87295022', '87287169', '87286062', '87287102', '87345447', '87286179', '87286203', '87286435', '87286641', '87342469', '87286146', '87281121', '87297531', '87343004', '87286575', '87286609', '87286815', '87286583', '87286096', '87295568', '87286195', '87295220', '87295667', '87281105', '87345520', '87345595', '87295725', '87295733', '87295774', '87345405', '87295014', '87281113', '87342436', '87345314', '87342451', '87345009', '87297523', '87295857', '87345561', '87295642', '87286260', '87343319', '87295006', '87295543', '87295048', '87295600', '87295790', '87281279', '87286856', '87286864', '87286831', '87287193', '87286526', '87287276', '87295535', '87281311', '87223263', '87286872', '87286534', '87286849', '87281246', '87287235', '87287243', '87286781', '87286278', '87287151', '87287185', '87286245', '87281139', '87345553', '87345546', '87313510', '87276006', '87272096', '87313668', '87313692', '87313700', '87313247', '87313262', '87276303', '87313296', '87313270', '87313288', '87316406', '87313593', '87276774', '87276212', '87272195', '87276741', '87276618', '87276766', '87313387', '87313403', '87276691', '87313734', '87313759', '87313833', '87313841', '87276725', '87381228', '87381202', '87381210', '87313569', '87316398', '87313577', '87276204', '87271551', '87276402', '87313585', '87296459', '87276782', '87313353', '87316208', '87313684', '87271577', '87276410', '87276113', '87313601', '87276717', '87276287', '87276279', '87313676', '87381269', '87381236', '87313304', '87313551', '87313544', '87276329', '87276311', '87271593', '87271585', '87276444', '87313726', '87313718', '87276352', '87276378', '87272013', '87276733', '87116665', '87313742', '87342014', '87317610', '87317263', '87317305', '87345157', '87345116', '87345108', '87342097', '87342089', '87345165', '87342048', '87342063', '87317123', '87342303', '87342337', '87317321', '87317255', '87316604', '87317222', '87342410', '87317099', '87342535', '87342105', '87342188', '87317180', '87317164', '87342071', '87317057', '87281071', '87317081', '87342261', '87342238', '87317107', '87317586', '87317016', '87342584', '87345231', '87342204', '87316687', '87317339', '87345025', '87342279', '87316679', '87317115', '87281428', '87287292', '87287300', '87342139', '87342006', '87345272', '87345140', '87345124', '87345215', '87342543', '87342113', '87281444', '87342550', '87342592', '87342527', '87342576', '87281410', '87317065', '87342402', '87342121', '87345132', '87342246', '87342212', '87342253', '87345033', '87317230', '87317248', '87345223', '87345041', '87345256', '87345264', '87281436', '87342220', '87317198', '87317206', '87313080', '87313874', '87317362', '87313320', '87316125', '87316059', '87317404', '87317487', '87317396', '87313460', '87316752', '87313486', '87313882', '87317495', '87317503', '87313221', '87313239', '87313395', '87313072', '87316067', '87342030', '87313114', '87313106', '87313478', '87313049', '87313064', '87313437', '87313494', '87313213', '87316109', '87313098', '87313338', '87313346', '87313122', '87317511', '87316745', '87313130', '87313379', '87313445', '87316075', '87313056', '87315044', '297291', '296178', '296012', '297119', '296004', '296269', '171371', '297085', '296129', '171702', '171744', '171736', '271817', '116699', '271783', '171348', '171355', '296293', '296095', '297150', '297143', '296616', '297051', '116566', '296566', '297283', '116582', '296418', '116673', '116681', '295063', '324335', '296871', '296145', '116574', '272286', '271775', '271601', '271734', '296434', '296442', '296632', '296608', '171751', '171769', '296152', '271874', '271882', '109306', '286005', '287250', '287128', '286732', '286187', '345389', '286518', '286229', '286112', '343418', '343210', '343400', '345207', '297515', '286500', '343301', '286427', '286419', '296244', '281006', '345397', '295808', '345421', '345439', '287219', '286740', '345496', '345249', '345413', '286716', '281055', '343475', '281469', '281451', '295709', '286161', '345306', '295055', '342295', '342287', '286302', '343160', '286542', '281402', '286401', '345587', '343459', '345280', '286567', '343103', '286807', '286625', '295022', '287169', '286062', '287102', '345447', '286179', '286203', '286435', '286641', '342469', '286146', '281121', '297531', '343004', '286575', '286609', '286815', '286583', '286096', '295568', '286195', '295220', '295667', '281105', '345520', '345595', '295725', '295733', '295774', '345405', '295014', '281113', '342436', '345314', '342451', '345009', '297523', '295857', '345561', '295642', '286260', '343319', '295006', '295543', '295048', '295600', '295790', '281279', '286856', '286864', '286831', '287193', '286526', '287276', '295535', '281311', '223263', '286872', '286534', '286849', '281246', '287235', '287243', '286781', '286278', '287151', '287185', '286245', '281139', '345553', '345546', '313510', '276006', '272096', '313668', '313692', '313700', '313247', '313262', '276303', '313296', '313270', '313288', '316406', '313593', '276774', '276212', '272195', '276741', '276618', '276766', '313387', '313403', '276691', '313734', '313759', '313833', '313841', '276725', '381228', '381202', '381210', '313569', '316398', '313577', '276204', '271551', '276402', '313585', '296459', '276782', '313353', '316208', '313684', '271577', '276410', '276113', '313601', '276717', '276287', '276279', '313676', '381269', '381236', '313304', '313551', '313544', '276329', '276311', '271593', '271585', '276444', '313726', '313718', '276352', '276378', '272013', '276733', '116665', '313742', '342014', '317610', '317263', '317305', '345157', '345116', '345108', '342097', '342089', '345165', '342048', '342063', '317123', '342303', '342337', '317321', '317255', '316604', '317222', '342410', '317099', '342535', '342105', '342188', '317180', '317164', '342071', '317057', '281071', '317081', '342261', '342238', '317107', '317586', '317016', '342584', '345231', '342204', '316687', '317339', '345025', '342279', '316679', '317115', '281428', '287292', '287300', '342139', '342006', '345272', '345140', '345124', '345215', '342543', '342113', '281444', '342550', '342592', '342527', '342576', '281410', '317065', '342402', '342121', '345132', '342246', '342212', '342253', '345033', '317230', '317248', '345223', '345041', '345256', '345264', '281436', '342220', '317198', '317206', '313080', '313874', '317362', '313320', '316125', '316059', '317404', '317487', '317396', '313460', '316752', '313486', '313882', '317495', '317503', '313221', '313239', '313395', '313072', '316067', '342030', '313114', '313106', '313478', '313049', '313064', '313437', '313494', '313213', '316109', '313098', '313338', '313346', '313122', '317511', '316745', '313130', '313379', '313445', '316075', '313056', '315044']
liste_code_UIC_1 = list(df["code_uic_complet"].unique())
liste_code_UIC = liste_code_UIC_1 + [str(i) for i in liste_code_UIC_1] + ["00" + str(i) for i in liste_code_UIC_1] + [str(i)[2:] for i in liste_code_UIC_1] + [str(i) for i in [str(i)[2:] for i in liste_code_UIC_1]] # Variation de l'écriture des codes UIC

def get_code_uic(nom_gare, df=df_ref):
    """Code uic à partir d'un nom de gare"""
    code_uic = df.loc[df['nom_gare'] == nom_gare, 'code_uic_complet'].values
    return code_uic[0] if len(code_uic) > 0 else None


liste_gares=sorted(list(df.nom_gare.values))
st.markdown("#  <center> :round_pushpin: Correspondances :round_pushpin: </center> ", unsafe_allow_html=True)  
st.markdown("Connaitre les offres de transports multimodales et leurs correspondances.")
# Selection d'une gare et d'un horaire
st.markdown("## Paramétrage :")
Gare_depart = st.selectbox('Sélection de la gare de départ',liste_gares)
paris_timezone = pytz.timezone('Europe/Paris')
d = st.date_input(
    "Date de départ",
    datetime.now(paris_timezone))
t = st.time_input('Heure de départ', datetime.now(paris_timezone))
datetime_object = datetime.combine(d, t)
#st.write('La date selectionnée est : ', d)
#st.write("L'heure sélectionnée est : ", t)
# Création de date en fonction de la date séléctionné pour estimation
date=[datetime.now(),datetime.now()+ timedelta(hours=24)
 ,datetime.now()+ timedelta(hours=24*2),datetime.now()+ timedelta(hours=24*3)
 ,datetime.now()+ timedelta(hours=24*4),datetime.now()+ timedelta(hours=24*5)
 ,datetime.now()+ timedelta(hours=24*6)]
weekday=[datetime.now().weekday(),(datetime.now()+timedelta(hours=24)).weekday()
 ,(datetime.now()+ timedelta(hours=24*2)).weekday(),(datetime.now()+ timedelta(hours=24*3)).weekday()
 ,(datetime.now()+ timedelta(hours=24*4)).weekday(),(datetime.now()+ timedelta(hours=24*5)).weekday()
 ,(datetime.now()+ timedelta(hours=24*6)).weekday()]
df_date = pd.DataFrame(list(zip(date,weekday)), columns = ['Date','Jour'])
original_date=datetime_object
new_date=df_date["Date"][df_date["Jour"]==original_date.weekday()].values[0]
new_date=pd.to_datetime(new_date)
result_date = original_date.replace(year=new_date.year, month=new_date.month, day=new_date.day)
datetime_string = result_date.strftime("%Y%m%dT%H%M%S")

#st.write(datetime_string[-6:])

radius_selection = st.slider('Rayon géographique de correspondance (en km)', 0.1, 2.5, 1.0)
temps_attente = st.slider("Temps d'attente de correspondance (en mn)", 1, 240, 30)

# Affichage des départs prévus pour l'offre ferrée

st.markdown("## Offre ferrée :")
date_now()
choix=str(Gare_depart)
choix_uic=df["code_uic_complet"][df["nom_gare"]==choix].values[0]
df_gare=depart_gare(str(choix_uic),date=datetime_string)
#st.dataframe(df_gare[["depart_destination", "depart_code", "depart_heure"]])


# GTFS

url = "https://eu.ftp.opendatasoft.com/sncf/gtfs/export-ter-gtfs-last.zip"
extraction_path = "GTFS_HdF"
result = process_gtfs_data(url, extraction_path, liste_code_UIC)
df_stop_times=result["stop_times"]
df_trips=result["trips"]
df_routes=result["routes"]
df_calendar=result["calendar_dates"]
liste_service=list(df_calendar[df_calendar["date"]==int(datetime_string[:8])].service_id)
#st.write(int(date_du_jour()))
df_stop_times['date'] = df_stop_times['trip_id'].str.split(':').str[1].str[:10]  # Colonne data
df_stop_times['code_uic'] = df_stop_times['stop_id'].str.split('-').str[1].str[:10]  # Colonne uic
df_stop_times = df_stop_times[~df_stop_times['stop_id'].str.contains('Car', case=False)] # suppression car
df_stop_times = df_stop_times[~df_stop_times['stop_id'].str.contains('Navette', case=False)] # suppresion navette
code_uic=str(get_code_uic(Gare_depart,df=df_ref))
df_exemple=df_stop_times[df_stop_times["code_uic"]==code_uic].sort_values(by="arrival_time")
df_exemple=df_exemple[["trip_id","arrival_time","departure_time","code_uic","stop_id"]]
resultat_jointure = pd.merge(df_exemple, df_trips, on='trip_id', how='left')
resultat_jointure = resultat_jointure[resultat_jointure['service_id'].isin(liste_service)]
resultat_jointure =resultat_jointure[["trip_id","arrival_time","departure_time","code_uic","route_id","direction_id","stop_id"]]
resultat_jointure = pd.merge(resultat_jointure, df_routes, on='route_id', how='left')
resultat_jointure=resultat_jointure[["route_short_name","arrival_time","departure_time","route_long_name","direction_id",'trip_id',"stop_id"]]
resultat_jointure['numero_train'] = resultat_jointure['trip_id'].apply(extraire_six_chiffres)
resultat_jointure = resultat_jointure.dropna(subset=['direction_id'])
resultat_jointure=resultat_jointure[["numero_train","route_short_name","arrival_time","departure_time","route_long_name"]]
df_nombre_trains=resultat_jointure.drop_duplicates().reset_index( drop=True)

date=str(datetime_string[:8][6:8])+"/"+str(datetime_string[:8][4:6])+"/"+str(datetime_string[:8][:4])



df_nombre_trains["arrival_time_temps_format"]= pd.to_datetime(df_nombre_trains['arrival_time'], format='%H:%M:%S')


df_nombre_trains["departure_time_temps_format"]= pd.to_datetime(df_nombre_trains['departure_time'], format='%H:%M:%S')
# Conversion de la chaîne de caractères en objet datetime
heure_obj = datetime.strptime(datetime_string[-6:], "%H%M%S")

# Calculer la différence en valeur absolue en minutes entre 'departure_time_temps_format' et 'heure_obj'
df_nombre_trains['diff_temps'] = df_nombre_trains['departure_time_temps_format'].apply(lambda x: abs((x - heure_obj).total_seconds()) / 60)

# Filtrer pour ne garder que les entrées où la différence de temps est inférieure ou égale à temps_attente
df_nombre_trains = df_nombre_trains[df_nombre_trains['diff_temps'] <= temps_attente]
nombre_trains=len(df_nombre_trains['numero_train'])
texte=str(nombre_trains)+" trains TER passent en gare de "+Gare_depart+" à l'heure de départ et au temps d'attente sélectionné"+" (estimation GTFS "+date+ " ). "
st.write(texte) 

st.dataframe(df_nombre_trains[["numero_train","route_short_name","arrival_time","departure_time","route_long_name"]])

df_nombre_trains["nom_gare"]=Gare_depart

st.markdown("**_Source_** : SNCF Voyageurs (Open data SNCF)")


# Test connexion GTFS routier 
st.markdown("## Offre intermodale :")  








try :
    stops_routier=stops
except :
    stops_routier=pd.read_csv('data/stops_total.txt' , on_bad_lines='skip')
    ## Convertir la colonne spécifiée en numérique, forcer les non numériques à NaN
    stops_routier["stop_lat"] = pd.to_numeric(stops_routier["stop_lat"], errors='coerce')
    stops_routier["stop_lon"] = pd.to_numeric(stops_routier["stop_lon"], errors='coerce')

    ## Supprimer les lignes avec des NaN dans la colonne spécifiée
    stops_routier.dropna(subset=["stop_lat"], inplace=True)
    stops_routier.dropna(subset=["stop_lon"], inplace=True)



# Récupération longitude latitude
id2="dcf53a2e-d4f1-4eb1-8490-e665ea41260b" # A optimiser avec une table déjà faite
password=""
stop_area_code = choix_uic
request_url = f"https://api.sncf.com/v1/coverage/sncf/stop_areas/stop_area:SNCF:{stop_area_code}"
response = requests.get(request_url, auth=(id2, password))
response_data = json.loads(response.text)
try:
    latitude = response_data['stop_areas'][0]['coord']['lat']
    longitude = response_data['stop_areas'][0]['coord']['lon']
    #print(f"Latitude: {latitude}, Longitude: {longitude}")
except (KeyError, IndexError):
    dummy=1





# Exemple d'utilisation avec les données fournies après les ///
gare_data = {"nom": ["Gare_depart"], "latitude": [float(latitude)], "longitude": [float(longitude)]}
arrets_bus_data = {
    "nom": list(stops_routier.stop_name),
    "latitude": list(stops_routier.stop_lat),
    "longitude": list(stops_routier.stop_lon),
    # Ajoutez d'autres arrêts de bus ici
}

gare_df = pd.DataFrame(gare_data)
arrets_bus_df = pd.DataFrame(arrets_bus_data)

# Appliquer le bruit
colonnes = {'latitude': 'latitude', 'longitude': 'longitude'}



result = bus_stops_nearby(arrets_bus_df, gare_df, radius=radius_selection)
gare_df = ajouter_bruit_df(gare_df, colonnes)
arrets_bus_df = ajouter_bruit_df(arrets_bus_df, colonnes)
result_bruit = bus_stops_nearby(arrets_bus_df, gare_df, radius=radius_selection)


# Création de la carte
if not result.empty:
    result_bruit["Type_arret"]="Cars"
new_row = {'nom':gare_data["nom"][0], 'longitude': gare_data["longitude"][0],  'latitude': gare_data["latitude"][0],'Type_arret': "TER"} # Ajouter une nouvelle ligne
#st.write(new_row)
try :
    result_bruit.loc[len(result_bruit)] = [gare_data["nom"][0],gare_data["latitude"][0], gare_data["longitude"][0],"TER"]
    result_bruit["size"] = 20  # crée une nouvelle colonne "size" avec la valeur 20 pour tous les points
    fig = px.scatter_mapbox(result_bruit, lat="latitude", lon="longitude", hover_name="nom", color="Type_arret",color_discrete_sequence=[ "#DDA0DD","#8FBC8F", "#0000FF", "#FFFF00", "#FF00FF", "#00FFFF"],
                            zoom=13, height=500, size="size")
    fig.update_layout(mapbox_style="carto-positron") # personnaliser le style de la carte
    #fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
    radius_selection=str(radius_selection)
    fig.update_layout(title="Correspondances intermodales ("+radius_selection+"km de rayon à partir de la gare)") # ajouter un titre à la carte
    st.plotly_chart(fig)   # Afficher la carte dans Streamlit

    nb_cars=str(len(result))

    
    
    st.write(nb_cars+" arrêts de cars sont identifiées à "+ radius_selection+ " km de la gare.")

    st.write(result)
    st.markdown("**_Source_** : Open data Région Hauts-de-France")
    
except :
    st.write("Pas de correspondances Cars-Trains identifiées.")




st.download_button(
    label="Exporter en CSV",
    data=convert_df(df_nombre_trains[["numero_train","route_short_name","arrival_time","departure_time","route_long_name","nom_gare"]]),
    file_name=date.replace("/", "_")+'_'+Gare_depart+'_nombre_trains.csv',
    mime='text/csv',
)


#################################################################### Fin application ################################################################
    
#st.write('Simulation : ', datetime_string) # hack connaitre la date d'estimmation
